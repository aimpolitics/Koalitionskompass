diff --git a/app.py b/app.py
index 5cc20bd..aaf1249 100644
--- a/app.py
+++ b/app.py
@@ -1,9 +1,11 @@
 import streamlit as st
 import os
+import logging
+from PIL import Image
+from pinecone_processor import get_vector_store_instance, PineconeConnectionError
 from simple_chatbot import SimpleChatbot
 from chatbot import ChatBot
-import logging
-from pinecone_processor import PineconePDFProcessor, initialize_pinecone, create_embeddings, count_documents, PineconeConnectionError
+import traceback
 
 # Konfiguration der Streamlit-App
 st.set_page_config(
@@ -17,269 +19,246 @@ st.set_page_config(
 logging.basicConfig(level=logging.INFO)
 logger = logging.getLogger(__name__)
 
+# Constants
+PAGE_TITLE = "Koalitionskompass"
+PAGE_ICON = "üìÑ"
+
 def initialize_session_state():
-    """Initialisiert die Session-Variablen, wenn sie noch nicht existieren."""
-    if "chat_history" not in st.session_state:
-        st.session_state.chat_history = []
-    
-    if "simple_chat_history" not in st.session_state:
-        st.session_state.simple_chat_history = []
-    
-    if "vector_store" not in st.session_state:
-        # Vector store should already be initialized by ensure_vectorstore_exists
-        pass
-    
+    """Initialize session state variables."""
     if "chatbot" not in st.session_state:
-        try:
-            st.session_state.chatbot = ChatBot(st.session_state.vector_store)
-        except ValueError as e:
-            st.error(f"Fehler bei der Initialisierung des Standard-Chatbots: {str(e)}")
-            st.warning("""
-            ## OpenAI API-Schl√ºssel fehlt oder ist ung√ºltig
-            
-            Bitte stellen Sie sicher, dass Sie einen g√ºltigen OpenAI API-Schl√ºssel konfiguriert haben:
-            
-            ### F√ºr Streamlit Cloud:
-            Gehen Sie zu den Streamlit Cloud-Einstellungen > Secrets und f√ºgen Sie die folgende Konfiguration hinzu:
-            ```toml
-            [openai]
-            api_key = "sk-Ihr-OpenAI-API-Schl√ºssel"
-            ```
-            
-            ### F√ºr lokale Entwicklung:
-            Erstellen Sie eine `.env`-Datei oder `.streamlit/secrets.toml` mit der gleichen Konfiguration.
-            """)
-            st.session_state.chatbot = None
-        except Exception as e:
-            st.error(f"Unerwarteter Fehler bei der Initialisierung des Standard-Chatbots: {str(e)}")
-            st.session_state.chatbot = None
+        st.session_state.chatbot = None
     
-    if "simple_chatbot" not in st.session_state:
-        try:
-            st.session_state.simple_chatbot = SimpleChatbot()
-        except ValueError as e:
-            st.error(f"Fehler bei der Initialisierung des einfachen Chatbots: {str(e)}")
-            st.warning("""
-            ## OpenAI API-Schl√ºssel fehlt oder ist ung√ºltig
-            
-            Bitte stellen Sie sicher, dass Sie einen g√ºltigen OpenAI API-Schl√ºssel konfiguriert haben:
-            
-            ### F√ºr Streamlit Cloud:
-            Gehen Sie zu den Streamlit Cloud-Einstellungen > Secrets und f√ºgen Sie die folgende Konfiguration hinzu:
-            ```toml
-            [openai]
-            api_key = "sk-Ihr-OpenAI-API-Schl√ºssel"
-            ```
-            
-            ### F√ºr lokale Entwicklung:
-            Erstellen Sie eine `.env`-Datei oder `.streamlit/secrets.toml` mit der gleichen Konfiguration.
-            """)
-            st.session_state.simple_chatbot = None
-        except Exception as e:
-            st.error(f"Unerwarteter Fehler bei der Initialisierung des einfachen Chatbots: {str(e)}")
-            st.session_state.simple_chatbot = None
+    if "chat_history" not in st.session_state:
+        st.session_state.chat_history = []
     
-    if "active_tab" not in st.session_state:
-        st.session_state.active_tab = "standard"
+    if "sources" not in st.session_state:
+        st.session_state.sources = []
+        
+    if "use_simple_language" not in st.session_state:
+        st.session_state.use_simple_language = False
+        
+    if "show_sources" not in st.session_state:
+        st.session_state.show_sources = False
+        
+    if "is_initial_load" not in st.session_state:
+        st.session_state.is_initial_load = True
 
 def format_source(source):
-    """Formatiert eine Quelle f√ºr die Anzeige."""
-    try:
-        if isinstance(source, dict):
-            # Wenn die Quelle ein Dictionary ist
-            page = source.get("page", "Unbekannte Seite")
-            text = source.get("text", "")
-            return f"<strong>Seite {page}:</strong> {text[:150]}..."
-        elif isinstance(source, str):
-            # Wenn die Quelle ein String ist
-            return source
-        else:
-            # Fallback f√ºr unerwartete Datentypen
-            return str(source)
-    except Exception as e:
-        # Bei Fehlern geben wir einen Standardtext zur√ºck
-        return "Quelle konnte nicht formatiert werden"
+    """Format a source document for display."""
+    source_html = ""
+    if isinstance(source, dict):
+        # Handle the new source format (dictionary with metadata)
+        page = source.get('page', 'Unbekannt')
+        if page is None:
+            page = 'Unbekannt'
+        
+        source_text = source.get('content', '')
+        
+        source_html = f"""
+        <div style="margin-bottom: 15px; padding: 10px; border-radius: 5px; background-color: #f0f2f6;">
+            <div style="font-size: 0.8em; color: #606060; margin-bottom: 5px;">
+                Seite {page}
+            </div>
+            <div style="font-size: 0.9em;">
+                {source_text}
+            </div>
+        </div>
+        """
+    else:
+        # Handle the old format (plain text)
+        preview = source[:200] + "..." if len(source) > 200 else source
+        source_html = f"""
+        <div style="margin-bottom: 15px; padding: 10px; border-radius: 5px; background-color: #f0f2f6;">
+            <div style="font-size: 0.9em;">
+                {preview}
+            </div>
+        </div>
+        """
+    
+    return source_html
 
 def render_chat_interface(simple_language=False):
-    """Rendert das Chat-Interface je nach ausgew√§hltem Modus"""
-    
-    # Auswahl der richtigen Chat-Historie basierend auf dem aktiven Modus
-    chat_history = st.session_state.simple_chat_history if simple_language else st.session_state.chat_history
-    
-    # Chat-Verlauf anzeigen
-    for message in chat_history:
-        with st.chat_message(message["role"]):
-            st.markdown(message["content"])
+    """Render the chat interface."""
+    # Initialize the chatbot if not already initialized
+    if st.session_state.chatbot is None:
+        try:
+            if simple_language:
+                st.session_state.chatbot = SimpleChatbot()
+                logger.info("SimpleChatbot initialized")
+            else:
+                vector_store = get_vector_store_instance()
+                st.session_state.chatbot = ChatBot(vector_store)
+                logger.info("Regular ChatBot initialized")
+        except Exception as e:
+            logger.error(f"Error initializing chatbot: {str(e)}")
+            if "API key is missing" in str(e):
+                st.error("‚ö†Ô∏è OpenAI API-Schl√ºssel fehlt. Bitte konfigurieren Sie den API-Schl√ºssel in den Streamlit Secrets oder Umgebungsvariablen.")
+            else:
+                traceback_str = traceback.format_exc()
+                st.error(f"‚ö†Ô∏è Fehler beim Initialisieren des Chatbots: {str(e)}\n\n{traceback_str}")
+            return
+
+    # Display chat history
+    for message in st.session_state.chat_history:
+        role = message["role"]
+        content = message["content"]
+        
+        with st.chat_message(role):
+            st.write(content)
     
-    # Input f√ºr Benutzer
-    user_input = st.chat_input("Stellen Sie eine Frage zum Regierungsprogramm...")
+    # Chat input
+    user_input = st.chat_input("Stellen Sie eine Frage zum Koalitionsvertrag...")
     
     if user_input:
-        # Benutzer-Nachricht speichern und anzeigen
+        # Display user message
         with st.chat_message("user"):
-            st.markdown(user_input)
+            st.write(user_input)
         
-        # Speichere Nachricht in der richtigen Chat-Historie
-        if simple_language:
-            st.session_state.simple_chat_history.append({"role": "user", "content": user_input})
-        else:
-            st.session_state.chat_history.append({"role": "user", "content": user_input})
-        
-        # Lade den richtigen Chatbot basierend auf dem ausgew√§hlten Modus
-        if simple_language:
-            if st.session_state.simple_chatbot is None:
-                with st.chat_message("assistant"):
-                    st.markdown("Der Chatbot konnte aufgrund eines Konfigurationsproblems nicht initialisiert werden. Bitte pr√ºfen Sie die Fehlermeldungen oben.")
-                return
-            chatbot = st.session_state.simple_chatbot
-        else:
-            if st.session_state.chatbot is None:
-                with st.chat_message("assistant"):
-                    st.markdown("Der Chatbot konnte aufgrund eines Konfigurationsproblems nicht initialisiert werden. Bitte pr√ºfen Sie die Fehlermeldungen oben.")
-                return
-            chatbot = st.session_state.chatbot
+        # Add to chat history
+        st.session_state.chat_history.append({"role": "user", "content": user_input})
         
-        # Antwort-Platzhalter
+        # Get response from chatbot
         with st.chat_message("assistant"):
-            message_placeholder = st.empty()
-            message_placeholder.markdown("Denke...")
-            
-            try:
-                # Antwort vom Chatbot
-                response = chatbot.get_response(user_input, simple_language=simple_language)
-                
-                # Antwort anzeigen
-                message_placeholder.markdown(response)
-                
-                # Speichere Antwort in der richtigen Chat-Historie
-                if simple_language:
-                    st.session_state.simple_chat_history.append({"role": "assistant", "content": response})
-                else:
-                    st.session_state.chat_history.append({"role": "assistant", "content": response})
+            with st.spinner("Denke nach..."):
+                try:
+                    response = st.session_state.chatbot.get_response(user_input)
+                    answer = response.get("answer", "Keine Antwort erhalten.")
+                    sources = response.get("sources", [])
+                    
+                    # Display assistant response
+                    st.write(answer)
+                    
+                    # Update sources
+                    st.session_state.sources = sources
                     
-            except Exception as e:
-                error_message = f"Entschuldigung, ich konnte keine Antwort generieren: {str(e)}"
-                message_placeholder.markdown(error_message)
+                    # Add to chat history
+                    st.session_state.chat_history.append({"role": "assistant", "content": answer})
+                except Exception as e:
+                    error_message = f"Fehler beim Generieren der Antwort: {str(e)}"
+                    st.error(error_message)
+                    logger.error(error_message)
+        
+        # Display sources if enabled
+        if st.session_state.show_sources and st.session_state.sources:
+            with st.expander("Quellen", expanded=True):
+                sources_html = ""
+                for source in st.session_state.sources:
+                    sources_html += format_source(source)
                 
-                # Fehler in der Chat-Historie speichern
-                if simple_language:
-                    st.session_state.simple_chat_history.append({"role": "assistant", "content": error_message})
-                else:
-                    st.session_state.chat_history.append({"role": "assistant", "content": error_message})
+                st.markdown(sources_html, unsafe_allow_html=True)
 
 def reset_current_chat():
-    """Setzt den aktuellen Chat-Verlauf zur√ºck"""
-    if st.session_state.active_tab == "standard":
-        st.session_state.chat_history = []
-    else:
-        st.session_state.simple_chat_history = []
+    """Reset the current chat."""
+    if st.session_state.chatbot:
+        st.session_state.chatbot.clear_history()
+    
+    st.session_state.chat_history = []
+    st.session_state.sources = []
+    st.session_state.is_initial_load = False
+    
+    # Display a success message
+    st.success("Chat zur√ºckgesetzt!")
     
-    st.success("Der aktuelle Chat wurde zur√ºckgesetzt!")
+    # Rerun the app to clear the interface
+    st.rerun()
 
-# √úberpr√ºfen und erstellen der Pinecone-Vektordatenbank, falls sie nicht existiert
 def ensure_vectorstore_exists():
+    """Ensure vector store exists and is accessible."""
     try:
-        # Initialisiere Pinecone
-        vector_store = initialize_pinecone()
-        st.success("Verbindung zur Pinecone-Vektordatenbank hergestellt!")
+        # Use our singleton pattern to get the vector store instance
+        # This will now use the integrated embedding approach
+        vector_store = get_vector_store_instance()
         return vector_store
+    except PineconeConnectionError as e:
+        logger.error(f"Pinecone connection error: {str(e)}")
+        st.error(f"""
+        ‚ö†Ô∏è Fehler bei der Verbindung zur Pinecone-Vektordatenbank: {str(e)}
+        
+        Bitte stellen Sie sicher, dass Sie einen g√ºltigen Pinecone API-Schl√ºssel und eine g√ºltige Umgebung konfiguriert haben.
+        
+        F√ºr Streamlit Cloud Deployment, stellen Sie sicher, dass Ihre secrets.toml das richtige Format hat:
+        [pinecone]
+        api_key = "ihr-pinecone-api-key"
+        environment = "ihre-pinecone-umgebung"
+        index_name = "koalitionskompass"
+        namespace = "default"
+        """)
+        raise
     except ValueError as e:
-        if "API key is missing" in str(e) or "environment is missing" in str(e):
-            # Special handling for API key issues
-            st.error("Fehler: Pinecone API-Schl√ºssel oder Umgebungsvariablen fehlen")
-            st.warning("""
-            ## Pinecone API-Konfiguration fehlt
+        logger.error(f"Value error: {str(e)}")
+        # More specific error for missing API key or environment
+        if "API key is missing" in str(e):
+            st.error(f"""
+            ‚ö†Ô∏è Pinecone API-Schl√ºssel fehlt: {str(e)}
             
-            ### F√ºr Streamlit Cloud:
-            Gehen Sie zu den Streamlit Cloud-Einstellungen > Secrets und f√ºgen Sie die folgende Konfiguration hinzu:
-            ```toml
+            F√ºr Streamlit Cloud Deployment, stellen Sie sicher, dass Ihre secrets.toml das richtige Format hat:
             [pinecone]
-            api_key = "Ihr-Pinecone-API-Schl√ºssel"
-            environment = "Ihre-Pinecone-Region"
+            api_key = "ihr-pinecone-api-key"
+            environment = "ihre-pinecone-umgebung"
             index_name = "koalitionskompass"
             namespace = "default"
-            ```
-            
-            ### F√ºr lokale Entwicklung:
-            Erstellen Sie eine `.env`-Datei oder `.streamlit/secrets.toml` mit der gleichen Konfiguration.
             """)
-            st.stop()
         else:
-            # General error handling
-            st.error(f"Fehler beim Verbinden mit der Pinecone-Vektordatenbank: {str(e)}")
-            st.info("Bitte stellen Sie sicher, dass die Pinecone-Datenbank bereits erstellt wurde.")
-            st.info("F√ºhren Sie lokal 'python create_vectorstore.py' aus, um die Datenbank zu erstellen.")
-            st.stop()
+            st.error(f"‚ö†Ô∏è Fehler: {str(e)}")
+        raise
     except Exception as e:
-        st.error(f"Unerwarteter Fehler: {str(e)}")
-        st.info("Bitte √ºberpr√ºfen Sie die Logs f√ºr weitere Details.")
-        st.stop()
+        logger.error(f"Unexpected error: {str(e)}")
+        st.error(f"""
+        ‚ö†Ô∏è Unerwarteter Fehler beim Zugriff auf die Vektordatenbank: {str(e)}
+        
+        Bitte √ºberpr√ºfen Sie die Logs f√ºr weitere Informationen oder erstellen Sie die Datenbank, falls sie nicht existiert.
+        """)
+        raise
 
 def main():
     # Titel ohne Logo
-    st.title("Koalitionskompass")
-    st.markdown("Dein interaktiver Programm-Guide")
+    st.title(f"{PAGE_ICON} {PAGE_TITLE}")
     
-    # Info-Box mit Beschreibung des Chatbots
-    st.info("""
-        **üìñ √úber diesen Chatbot:**
-        
-        Dieser Chatbot beantwortet Ihre Fragen zum Regierungsprogramm 2025-2029. Die Antworten basieren auf den Inhalten des offiziellen Dokuments, mit Quellenangaben zu den entsprechenden Seiten.
-        
-        *Bitte beachten Sie: Der Chatbot kann unvollst√§ndige oder falsche Antworten geben und in manchen F√§llen halluzinieren. √úberpr√ºfen Sie bitte immer die angezeigten Quellenangaben.*
-    """)
-    
-    # Stellen Sie sicher, dass die Vektordatenbank existiert
-    # Dies muss vor der Initialisierung des ChatBots geschehen
-    vector_store = ensure_vectorstore_exists()
-    if vector_store:
-        st.session_state.vector_store = vector_store
-    
-    # Session State initialisieren (inklusive Chatbot)
+    # Initialize session state
     initialize_session_state()
     
-    # Einfache Modusauswahl mit Buttons
-    col1, col2 = st.columns(2)
-    
-    with col1:
-        if st.button("Standard", key="standard_mode", 
-                    type="primary" if st.session_state.active_tab == "standard" else "secondary",
-                    use_container_width=True):
-            st.session_state.active_tab = "standard"
-            st.rerun()
-            
-    with col2:
-        if st.button("Einfache Sprache", key="simple_mode", 
-                    type="primary" if st.session_state.active_tab == "simple" else "secondary",
-                    use_container_width=True):
-            st.session_state.active_tab = "simple"
-            st.rerun()
-    
-    # Hinweis zum aktiven Modus
-    if st.session_state.active_tab == "standard":
-        st.caption("Sie sind im Standard-Modus")
-    else:
-        st.caption("Sie sind im Modus 'Einfache Sprache'")
-    
-    # Chat Container erstellen - wir packen das Chat Interface in ein Container,
-    # damit es in der Rangfolge vor dem Footer erscheint
-    chat_container = st.container()
-    
-    # Reset-Button f√ºr den aktuellen Chat
-    st.button("Aktuellen Chat zur√ºcksetzen", on_click=reset_current_chat, use_container_width=True)
+    # First message on initial load
+    if st.session_state.is_initial_load:
+        with st.chat_message("assistant"):
+            st.write("Hallo! Ich bin der Koalitionskompass-Assistent. Ich kann Ihnen Fragen zum Koalitionsvertrag der Bundesregierung beantworten. Wie kann ich Ihnen helfen?")
+        st.session_state.is_initial_load = False
     
-    # Footer - jetzt am Ende, nach dem Chat-Container
-    footer_container = st.container()
-    with footer_container:
+    # Sidebar
+    with st.sidebar:
+        st.markdown("## Einstellungen")
+        
+        # Language toggle
+        simple_language = st.toggle("Einfache Sprache verwenden", value=st.session_state.use_simple_language)
+        
+        # Update session state and reset chatbot if language preference changed
+        if simple_language != st.session_state.use_simple_language:
+            st.session_state.use_simple_language = simple_language
+            st.session_state.chatbot = None  # Force re-initialization with new language setting
+            reset_current_chat()
+        
+        # Sources toggle
+        st.session_state.show_sources = st.toggle("Quellen anzeigen", value=st.session_state.show_sources)
+        
+        # Reset chat button
+        st.button("Chat zur√ºcksetzen", on_click=reset_current_chat, type="primary")
+        
+        # About section
         st.markdown("---")
-        st.markdown("¬© 2023 AimPolitics | Koalitionskompass")
+        st.markdown("## √úber")
+        st.markdown("""
+        Der Koalitionskompass nutzt KI, um den Koalitionsvertrag der Bundesregierung zug√§nglich zu machen.
+        
+        **Hinweis:** Die bereitgestellten Informationen dienen nur zur Orientierung und ersetzen nicht das Lesen des vollst√§ndigen Vertrags.
+        """)
     
-    # Chat Interface innerhalb des Containers rendern
-    with chat_container:
-        if st.session_state.active_tab == "standard":
-            render_chat_interface(simple_language=False)
-        else:
-            render_chat_interface(simple_language=True)
+    # Try to ensure vector store connection
+    try:
+        ensure_vectorstore_exists()
+        # Render chat interface with language preference
+        render_chat_interface(simple_language=st.session_state.use_simple_language)
+    except Exception as e:
+        logger.error(f"Failed to initialize application: {str(e)}")
+        # Error messages are displayed by the ensure_vectorstore_exists function
 
 if __name__ == "__main__":
     main()
\ No newline at end of file
